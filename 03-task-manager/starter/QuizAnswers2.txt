1. In this lesson, you created a middleware function called asyncWrapper. Why?
Wrap the controllers and it helps with the functionality that we do not gave to use the same piece of code again and again
there are some npm p[ackages that can do it for us

2. Suppose that you want to make sure that both a status code and and error message are send back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:
const getTask = asyncWrapper(async (req, res, next) => {
    const {id: taskID} = req.params
    const task = await Task.findOne({ _id: taskID })
    if (!task){
       return next(CustomAPIError(`No task with id: ${taskID}.`))
    }
    res.status(200).json({ task })
})


As you will see in the lessons that follow, you do not have to create the asyncWrapper middleware, because you can instead use an NPM package called express-async-errors that provides the capability. The course uses Express 4, but in Express 5, function equivalent to express-async-errors is automatically included, so for Express 5 this package is not needed.